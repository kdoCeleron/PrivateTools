<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>